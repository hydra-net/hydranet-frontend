name: Deploy website to S3

on:
  push:
    branches:
      - arbitrum #main
      - develop-hydranet #develop

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:

#      - name: Configuration for production branch

#        if: ${{ github.ref == 'refs/heads/arbitrum' }}
#        run: |
#          echo "S3_BUCKET=${{ secrets.S3_BUCKET_PRD }}" >> $GITHUB_ENV
#          echo "S3_BUCKET_REGION=${{ secrets.S3_BUCKET_REGION_PRD }}" >> $GITHUB_ENV
#          echo "CLOUDFRONT_DISTRIBUTION_ID=${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_PRD }}" >> $GITHUB_ENV

      - name: Configuration for dev branch
        if: ${{ github.ref == 'refs/heads/develop-hydranet' }}
        run: |
          echo "S3_BUCKET=${{ secrets.S3_BUCKET_STG }}" >> $GITHUB_ENV
          echo "S3_BUCKET_REGION=${{ secrets.S3_BUCKET_REGION_STG }}" >> $GITHUB_ENV
          echo "CLOUDFRONT_DISTRIBUTION_ID=${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_STG }}" >> $GITHUB_ENV

      - name: checkout
        uses: actions/checkout@v2

      - name: setup node
        uses: actions/setup-node@v2
        with:
          node-version: '16.13.2'
          # global cache directory
          cache: 'yarn'
          cache-dependency-path: '**/yarn.lock'

        # will cache node modules and only re-install them only if yarn.lock get updated
      - name: setup cache node_modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        run: yarn install

      - name: create env file
        run: |
          cp .env.example .env
          echo REACT_APP_INFURA_IDS=${{ secrets.INFURA_ID }} >> .env

      - name: Run unit tests
        run: yarn test:unit

      - name: Build
        run: yarn build

      - name: Deploy
        uses: reggionick/s3-deploy@v3
        with:
          folder: build # folder generated by build command
          bucket: ${{ env.S3_BUCKET }}
          bucket-region: ${{ env.S3_BUCKET_REGION }}
          dist-id: ${{ env.CLOUDFRONT_DISTRIBUTION_ID }}
          invalidation: /*  # reset cache for cloudfront for all content of the directory
          delete-removed: true
          private: false